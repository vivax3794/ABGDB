============================= test session starts ==============================
platform linux -- Python 3.8.0, pytest-6.0.1, py-1.9.0, pluggy-0.13.1
rootdir: /home/vivax/coding/ABGDB, configfile: tox.ini
plugins: cov-2.10.0, asyncio-0.14.0
collected 14 items

tests/test_utils.py .                                                    [  7%]
tests/test_cogs/test_admin.py .....                                      [ 42%]
tests/test_database/test_core.py FF                                      [ 57%]
tests/test_database/test_settings.py ......                              [100%]

=================================== FAILURES ===================================
___________________________ test_default_and_getting ___________________________

db = <src.database.core.Database object at 0x7fe373fa4640>

    def test_default_and_getting(db):
>       db.add_server(123)

tests/test_database/test_core.py:2: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/database/core.py:31: in add_server
    self.db.run(
../../.local/share/virtualenvs/ABGDB-fvcmkaEy/lib/python3.8/site-packages/postgres/__init__.py:354: in run
    cursor.run(sql, parameters, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cursor object at 0x7fe374049140; closed: -1>
sql = '\n            INSERT INTO settings (server_id, prefix) VALUES (%(id)s, %(prefix)s)\n        '
parameters = {'id': 123, 'prefix': '!'}, kw = {}

    def run(self, sql, parameters=None, **kw):
        """Execute a query, without returning any results.
    
        :param str sql: the SQL statement to execute
        :param parameters: the `bind parameters`_ for the SQL statement
        :type parameters: dict or tuple
        :param kw: alternative to passing a :class:`dict` as `parameters`
    
        .. _bind parameters: #bind-parameters
    
        Example usage:
    
        >>> db.run("DROP TABLE IF EXISTS foo CASCADE")
        >>> db.run("CREATE TABLE foo (bar text, baz int)")
        >>> bar, baz = 'buz', 42
        >>> db.run("INSERT INTO foo VALUES (%s, %s)", (bar, baz))
        >>> db.run("INSERT INTO foo VALUES (%(bar)s, %(baz)s)", dict(bar=bar, baz=baz))
        >>> db.run("INSERT INTO foo VALUES (%(bar)s, %(baz)s)", bar=bar, baz=baz)
    
        """
        if kw:
            if parameters:
                parameters.update(kw)
            else:
                parameters = kw
>       TupleCursor.execute(self, sql, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "settings_pkey"
E       DETAIL:  Key (server_id)=(123) already exists.

../../.local/share/virtualenvs/ABGDB-fvcmkaEy/lib/python3.8/site-packages/postgres/cursors.py:195: UniqueViolation
---------------------------- Captured stderr setup -----------------------------
2020-08-11 22:28:21.361 | INFO     | src.database.core:connect_to_database:15 - connecting to database
2020-08-11 22:28:21.367 | INFO     | src.database.core:connect_to_database:18 - creating missing tabels
----------------------------- Captured stderr call -----------------------------
2020-08-11 22:28:21.369 | DEBUG    | src.database.core:add_server:29 - adding settings for server 123
________________________________ test_updating _________________________________

db = <src.database.core.Database object at 0x7fe373fa4e50>

    def test_updating(db):
>       db.add_server(123)

tests/test_database/test_core.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/database/core.py:31: in add_server
    self.db.run(
../../.local/share/virtualenvs/ABGDB-fvcmkaEy/lib/python3.8/site-packages/postgres/__init__.py:354: in run
    cursor.run(sql, parameters, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cursor object at 0x7fe374049640; closed: -1>
sql = '\n            INSERT INTO settings (server_id, prefix) VALUES (%(id)s, %(prefix)s)\n        '
parameters = {'id': 123, 'prefix': '!'}, kw = {}

    def run(self, sql, parameters=None, **kw):
        """Execute a query, without returning any results.
    
        :param str sql: the SQL statement to execute
        :param parameters: the `bind parameters`_ for the SQL statement
        :type parameters: dict or tuple
        :param kw: alternative to passing a :class:`dict` as `parameters`
    
        .. _bind parameters: #bind-parameters
    
        Example usage:
    
        >>> db.run("DROP TABLE IF EXISTS foo CASCADE")
        >>> db.run("CREATE TABLE foo (bar text, baz int)")
        >>> bar, baz = 'buz', 42
        >>> db.run("INSERT INTO foo VALUES (%s, %s)", (bar, baz))
        >>> db.run("INSERT INTO foo VALUES (%(bar)s, %(baz)s)", dict(bar=bar, baz=baz))
        >>> db.run("INSERT INTO foo VALUES (%(bar)s, %(baz)s)", bar=bar, baz=baz)
    
        """
        if kw:
            if parameters:
                parameters.update(kw)
            else:
                parameters = kw
>       TupleCursor.execute(self, sql, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "settings_pkey"
E       DETAIL:  Key (server_id)=(123) already exists.

../../.local/share/virtualenvs/ABGDB-fvcmkaEy/lib/python3.8/site-packages/postgres/cursors.py:195: UniqueViolation
---------------------------- Captured stderr setup -----------------------------
2020-08-11 22:28:21.404 | INFO     | src.database.core:connect_to_database:15 - connecting to database
2020-08-11 22:28:21.408 | INFO     | src.database.core:connect_to_database:18 - creating missing tabels
----------------------------- Captured stderr call -----------------------------
2020-08-11 22:28:21.409 | DEBUG    | src.database.core:add_server:29 - adding settings for server 123
=============================== warnings summary ===============================
/home/vivax/.local/share/virtualenvs/ABGDB-fvcmkaEy/lib/python3.8/site-packages/aiohttp/helpers.py:107
  /home/vivax/.local/share/virtualenvs/ABGDB-fvcmkaEy/lib/python3.8/site-packages/aiohttp/helpers.py:107: DeprecationWarning: "@coroutine" decorator is deprecated since Python 3.8, use "async def" instead
    def noop(*args, **kwargs):  # type: ignore

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED tests/test_database/test_core.py::test_default_and_getting - psycopg2....
FAILED tests/test_database/test_core.py::test_updating - psycopg2.errors.Uniq...
=================== 2 failed, 12 passed, 1 warning in 0.21s ====================
